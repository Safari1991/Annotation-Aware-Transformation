// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: case Maps
//:: tools silicon
//:: verdict Pass

class Maps {
  
  void main(){
    map<int,int> m = map<int,int>{2,3};
    assert 2 in keysMap( m );
    assert ! (3 in keysMap( m ));
    assert m [ 2 ] == 3;
    assert disjointMap( m , map<int,int>{3,3} );
    assert map<int,int>{2,4} == map<int,int>{2,4};
    assert equalsMap( buildMap( m , 7 , 1 ) , buildMap( buildMap( m , 2 , 3 ) , 7 , 1 ) );
    assert equalsMap( m , buildMap( m , 2 , 3 ) );
  }
  
  void m(){
    map<int,int> a = map<int,int>{2,3};
    map<int,int> b = map<int,int>{3,2};
    assert a [ (b [ 3 ]) ] == 3;
  }
  
  requires (\forall int i;0 <= i && i < 100;i in keysMap( a ) && i in keysMap( b ) && a [ i ] != b [ i ]);
  void m2(map<int,boolean> a,map<int,boolean> b){
    assert (\forall int i;0 <= i && i < 100;{:a [ i ]:} || {:b [ i ]:});
  }
  
  requires (\forall int i;0 <= i && i < 100;i in keysMap( a ) && a [ i ] == i * i);
  void m3(map<int,int> a){
    assert a [ 20 ] == 400;
  }
  
  void m4(){
    map<int,int> a = map<int,int>{3,9};
    if (a [ 4 ] == 4) {
      m();
    }
  }
  
  requires 20 in keysMap( a );
  void m5(map<int,int> a){
    assert a [ 20 ] <= 0 || 0 < a [ 20 ];
  }
  
  void m6(){
    map<int,int> a = map<int,int>{3,9};
    assert map<int,int>{2,4} == map<int,int>{2,4};
    assert buildMap( a , 3 , 5 ) == map<int,int>{3,5};
    assert buildMap( a , 2 , 5 ) == map<int,int>{2,5,3,9};
    assert buildMap( a , 2 , 5 ) == map<int,int>{2,6,3,9,2,5};
  }
  
  void m7(){
    map<int,int> a = map<int,int>{1,1,2,4,3,9};
    assert (\forall int i;i in keysMap( a );a [ i ] == i * i);
    assert ! (0 in keysMap( a ));
    assert 1 in keysMap( a );
    assert 2 in keysMap( a );
    assert 3 in keysMap( a );
    assert (\forall int i;i < 1 || i > 3;! (i in keysMap( a )));
  }
  
  void m8(){
    map<int,int> a = map<int,int>{};
    assert (\forall int i;true;! (i in keysMap( a )));
    int i = 0;
    int n = 100;
    gpuopt iter_merge i 3;
    loop_invariant 0 <= i;
    loop_invariant i <= 100;
    loop_invariant (\forall int j;j in keysMap( a );a [ j ] == j * j);
    loop_invariant (\forall int k;true;(0 <= k && k < i) == (k in keysMap( a )));
    while(i < 100){
      a = buildMap( a , i , i * i );
      i = i + 1;
    }
    assert disjointMap( a , map<int,int>{- 1,2} );
    m3(a);
  }
  
  void m9(){
    map<int,int> a = map<int,int>{};
    map<int,int> b = map<int,int>{};
    assert disjointMap( a , b );
    b = map<int,int>{2,3,4,2,5,- 6,6,7};
    assert disjointMap( a , b );
    assert ! disjointMap( b , map<int,int>{6,3} );
  }
  
  void m10(){
    map<int,int> a = map<int,int>{};
    map<int,int> b = map<int,int>{};
    assert disjointMap( a , b );
    b = map<int,int>{2,3,4,2,5,- 6,6,7};
    assert disjointMap( a , b );
    a = map<int,int>{3,3,1,2,9,- 6,8,7};
    assert disjointMap( a , b );
  }
  
}

