// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases MergingAndUnrollingOrig
//:: tools silicon
//:: verdict Pass

class MergingAndUnrollingOrig {
  
  context_everywhere array != null;
  requires (\forall* int i;i >= 0 && i < array.length;Perm( array [ i ] , 1 ));
  ensures (\forall* int i;i >= 0 && i < array.length;Perm( array [ i ] , 1 ));
  ensures (\forall int i;i >= 0 && i < array.length;array [ i ] == \old( array [ i ] ) + 107 * i);
  void merging_unrolling_orig(int[] array){
    par threads(int tid = 0 .. array.length)
      requires Perm( array [ tid ] , 1 );
      ensures Perm( array [ tid ] , 1 );
      ensures array [ tid ] == \old( array [ tid ] ) + 107 * tid;
      {
        gpuopt iter_merge j 5;
        loop_invariant j >= 0;
        loop_invariant j <= 107;
        loop_invariant Perm( array [ tid ] , 1 );
        loop_invariant array [ tid ] == \old( array [ tid ] ) + j * tid;
        for(int j = 0;j < 107;j ++){
          array [ tid ] = array [ tid ] + tid;
        }
      }
  }
  
}

