// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases opt_LoopPVL
//:: tools silicon
//begin(all)

class Counter {
  int x;
}

class Loop {
  
  requires c != null;
  requires Perm( c.x , 1 );
  requires y == 1024;
  ensures c != null;
  ensures Perm( c.x , 1 );
  ensures c.x == \old( c.x ) + y;
  void incr(Counter c,int y){
    int i = 0;
    int vct_mi_l = 0;
    assert 0 <= i;
    assert i <= 1024;
    assert c != null;
    assert Perm( c.x , 1 );
    assert c.x == \old( c.x ) + i;
    c.x = c.x + 1;
    i = i + 1;
    vct_mi_l = vct_mi_l + 1;
    assert 0 <= i;
    assert i <= 1024;
    assert c != null;
    assert Perm( c.x , 1 );
    assert c.x == \old( c.x ) + i;
    c.x = c.x + 1;
    i = i + 1;
    vct_mi_l = vct_mi_l + 1;
    assert 0 <= i;
    assert i <= 1024;
    assert c != null;
    assert Perm( c.x , 1 );
    assert c.x == \old( c.x ) + i;
    c.x = c.x + 1;
    i = i + 1;
    vct_mi_l = vct_mi_l + 1;
    assert 0 <= i;
    assert i <= 1024;
    assert c != null;
    assert Perm( c.x , 1 );
    assert c.x == \old( c.x ) + i;
    c.x = c.x + 1;
    i = i + 1;
    vct_mi_l = vct_mi_l + 1;
    loop_invariant 4 <= vct_mi_l;
    loop_invariant vct_mi_l <= 1024;
    loop_invariant i == 0 + 1 * vct_mi_l;
    loop_invariant i % 5 == 4 % 5;
    loop_invariant 0 + 4 <= i;
    loop_invariant i <= 1024;
    loop_invariant c != null;
    loop_invariant Perm( c.x , 1 );
    loop_invariant c.x == \old( c.x ) + i;
    while(i < 1024){
      c.x = c.x + 1;
      i = i + 1;
      vct_mi_l = vct_mi_l + 1;
      c.x = c.x + 1;
      i = i + 1;
      vct_mi_l = vct_mi_l + 1;
      c.x = c.x + 1;
      i = i + 1;
      vct_mi_l = vct_mi_l + 1;
      c.x = c.x + 1;
      i = i + 1;
      vct_mi_l = vct_mi_l + 1;
      c.x = c.x + 1;
      i = i + 1;
      vct_mi_l = vct_mi_l + 1;
    }
  }
  
}

