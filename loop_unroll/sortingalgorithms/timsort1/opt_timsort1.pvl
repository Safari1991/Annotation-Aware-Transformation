// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases opt_TimSort
//:: tools silicon
//:: verdict Pass

class TimSort {
  
  ensures \result >= 0;
  ensures ((\forall int j;j >= 0 && j < (| ys |);element != ys [ j ]) ==> \result == 0);
  ensures (\result == 0 ==> (\forall int j;j >= 0 && j < (| ys |);element != ys [ j ]));
  ensures ((\forall int j;j >= 0 && j < (| ys |);element == ys [ j ]) ==> \result == (| ys |));
  ensures (\result == (| ys |) ==> (\forall int j;j >= 0 && j < (| ys |);element == ys [ j ]));
  ensures \result <= (| ys |);
  ensures (element in ys ==> \result > 0);
  ensures (\result > 0 ==> element in ys);
  static pure int counter(seq<int> ys,int element) = (| ys |) > 0 ? (head( ys ) == element ? 1 + counter(tail( ys ),element) : counter(tail( ys ),element)) : 0;
  
  requires i >= 0 && i < (| xs |);
  requires (j >= 0 && j < (| xs |));
  requires i <= j;
  requires (k >= 0 && k <= (| xs |));
  ensures (| \result |) == (| xs |) - k;
  ensures (k > j ==> (\forall int l;l >= 0 && l < (| \result |);\result [ l ] == xs [ (l + k) ]));
  ensures (k >= j ==> (\forall int l;l >= 0 && l < (| \result |);(l + k != j ==> \result [ l ] == xs [ (l + k) ]) && (l + k == j ==> \result [ l ] == xs [ i ])));
  ensures (k > i ==> (\forall int l;l >= 0 && l < (| \result |);(l + k != j ==> \result [ l ] == xs [ (l + k) ]) && (l + k == j ==> \result [ l ] == xs [ i ])));
  ensures (k >= i ==> (\forall int l;l >= 0 && l < (| \result |);(l + k != i && l + k != j ==> \result [ l ] == xs [ (l + k) ]) && (l + k == i ==> \result [ l ] == xs [ j ]) && (l + k == j ==> \result [ l ] == xs [ i ])));
  ensures (\forall int l;l >= 0 && l < (| \result |);(l + k != i && l + k != j ==> \result [ l ] == xs [ (l + k) ]) && (l + k == i ==> \result [ l ] == xs [ j ]) && (l + k == j ==> \result [ l ] == xs [ i ]));
  static pure seq<int> swap(seq<int> xs,int i,int j,int k) = k < (| xs |) ? (k == i ? seq<int>{xs [ j ]} + swap(xs,i,j,k + 1) : (k == j ? seq<int>{xs [ i ]} + swap(xs,i,j,k + 1) : seq<int>{xs [ k ]} + swap(xs,i,j,k + 1))) : seq<int>{};
  
  static pure boolean isApermutation(seq<int> xs,seq<int> ys) = (| xs |) == (| ys |) && (\forall int l;l >= 0 && l < (| xs |);counter(xs,xs [ l ]) == counter(ys,xs [ l ]));
  
  requires i >= 0 && i < (| xs |);
  requires (j >= 0 && j < (| xs |));
  requires i <= j;
  ensures swap(xs,i,j,0) == ((xs [ i -> xs [ j ] ]) [ j -> xs [ i ] ]);
  ensures ((xs [ i -> xs [ j ] ]) [ j -> xs [ i ] ]) == swap(xs,i,j,0);
  void lemma_swap_seq_eq(seq<int> xs,int i,int j){
  }
  
  requires i >= 0 && i < (| xs |);
  requires (j >= 0 && j < (| xs |));
  requires i == j;
  ensures swap(xs,i,j,0) == xs;
  void lemma_swap_base(seq<int> xs,int i,int j){
  }
  
  ensures counter(seq<int>{},i) == 0;
  void lemma_count_empty(int i){
  }
  
  ensures (i == element ==> counter(seq<int>{i},element) == 1);
  ensures (i != element ==> counter(seq<int>{i},element) == 0);
  void lemma_count_single(int i,int element){
  }
  
  ensures ((| xs |) == 0 ==> counter(xs + ys,element) == counter(ys,element));
  ensures ((| ys |) == 0 ==> counter(xs + ys,element) == counter(xs,element));
  ensures (| xs + ys |) == (| xs |) + (| ys |);
  ensures counter(tail( xs ) + ys,element) == counter(tail( xs ),element) + counter(ys,element);
  ensures counter(xs + ys,element) == counter(xs,element) + counter(ys,element);
  void lemma_count_app(seq<int> xs,seq<int> ys,int element){
    if (0 < (| xs |)) {
      lemma_count_app(tail( xs ),ys,element);
      assert tail( xs ) + ys == tail( xs + ys );
    }
  }
  
  ensures (\forall int l;l >= 0 && l < (| xs |);counter(xs + ys,xs [ l ]) == counter(xs,xs [ l ]) + counter(ys,xs [ l ]));
  void lemma_count_app_all(seq<int> xs,seq<int> ys){
    int k = 0;
    loop_invariant 0 <= k;
    loop_invariant k <= (| xs |);
    loop_invariant (\forall int l;l >= 0 && l < k;counter(xs + ys,xs [ l ]) == counter(xs,xs [ l ]) + counter(ys,xs [ l ]));
    while(k < (| xs |)){
      lemma_count_app(xs,ys,xs [ k ]);
      k = k + 1;
    }
  }
  
  ensures counter(xs + ys + ts + rs + zs,element) == counter(xs,element) + counter(ys,element) + counter(ts,element) + counter(rs,element) + counter(zs,element);
  void lemma_count_app_ext(seq<int> xs,seq<int> ys,seq<int> ts,seq<int> rs,seq<int> zs,int element){
    lemma_count_app(xs + ys + ts + rs,zs,element);
    assert counter(xs + ys + ts + rs + zs,element) == counter(xs + ys + ts + rs,element) + counter(zs,element);
    lemma_count_app(xs + ys + ts,rs,element);
    assert counter(xs + ys + ts + rs,element) == counter(xs + ys + ts,element) + counter(rs,element);
    lemma_count_app(xs + ys,ts,element);
    assert counter(xs + ys + ts,element) == counter(xs + ys,element) + counter(ts,element);
    lemma_count_app(xs,ys,element);
    assert counter(xs + ys,element) == counter(xs,element) + counter(ys,element);
    assert counter(xs + ys + ts + rs + zs,element) == counter(xs,element) + counter(ys,element) + counter(ts,element) + counter(rs,element) + counter(zs,element);
  }
  
  requires i >= 0 && i < (| xs |);
  requires (j >= 0 && j < (| xs |));
  requires i < j;
  ensures xs == (xs [ 0 .. i ]) + seq<int>{xs [ i ]} + (xs [ i + 1 .. j ]) + seq<int>{xs [ j ]} + (xs [ j + 1 .. (| xs |) ]);
  ensures counter(xs,element) == counter((xs [ 0 .. i ]) + seq<int>{xs [ i ]} + (xs [ i + 1 .. j ]) + seq<int>{xs [ j ]} + (xs [ j + 1 .. (| xs |) ]),element);
  void lemma_swap_permutation_helper(seq<int> xs,int i,int j,int element){
  }
  
  requires i >= 0 && i < (| xs |);
  requires (j >= 0 && j < (| xs |));
  requires i <= j;
  requires ys == swap(xs,i,j,0);
  ensures counter(xs,element) == counter(ys,element);
  void lemma_swap_permutation(seq<int> xs,seq<int> ys,int i,int j,int element){
    assert (\forall int l;l >= 0 && l < (| ys |);l != i && l != j ==> swap(xs,i,j,0) [ l ] == xs [ l ]);
    assert (\forall int l;l >= 0 && l < (| ys |);(l == i ==> swap(xs,i,j,0) [ l ] == xs [ j ]) && (l == j ==> ys [ l ] == xs [ i ]));
    if (i == j) {
      lemma_swap_base(xs,i,j);
      assert xs == ys;
      assert counter(xs,element) == counter(ys,element);
    }
    if (i < j) {
      assert ys == (xs [ 0 .. i ]) + seq<int>{xs [ j ]} + (xs [ i + 1 .. j ]) + seq<int>{xs [ i ]} + (xs [ j + 1 .. (| xs |) ]);
      assert counter(ys,element) == counter((xs [ 0 .. i ]) + seq<int>{xs [ j ]} + (xs [ i + 1 .. j ]) + seq<int>{xs [ i ]} + (xs [ j + 1 .. (| xs |) ]),element);
      lemma_count_app_ext(xs [ 0 .. i ],seq<int>{xs [ j ]},xs [ i + 1 .. j ],seq<int>{xs [ i ]},xs [ j + 1 .. (| xs |) ],element);
      assert counter(ys,element) == counter(xs [ 0 .. i ],element) + counter(seq<int>{xs [ j ]},element) + counter(xs [ i + 1 .. j ],element) + counter(seq<int>{xs [ i ]},element) + counter(xs [ j + 1 .. (| xs |) ],element);
      lemma_count_single(i,element);
      lemma_count_single(j,element);
      lemma_swap_permutation_helper(xs,i,j,element);
      lemma_count_app_ext(xs [ 0 .. i ],seq<int>{xs [ i ]},xs [ i + 1 .. j ],seq<int>{xs [ j ]},xs [ j + 1 .. (| xs |) ],element);
      assert counter(xs,element) == counter(xs [ 0 .. i ],element) + counter(seq<int>{xs [ i ]},element) + counter(xs [ i + 1 .. j ],element) + counter(seq<int>{xs [ j ]},element) + counter(xs [ j + 1 .. (| xs |) ],element);
      assert counter(xs,element) == counter(ys,element);
    }
    assert counter(xs,element) == counter(ys,element);
  }
  
  requires i >= 0 && i < (| xs |);
  requires (j >= 0 && j < (| xs |));
  requires i <= j;
  requires ys == swap(xs,i,j,0);
  ensures (\forall int l;l >= 0 && l < (| xs |);counter(xs,xs [ l ]) == counter(ys,xs [ l ]));
  void lemma_swap_permutation_all(seq<int> xs,seq<int> ys,int i,int j){
    int k = 0;
    loop_invariant 0 <= k;
    loop_invariant k <= (| xs |);
    loop_invariant (\forall int l;l >= 0 && l < k;counter(xs,xs [ l ]) == counter(ys,xs [ l ]));
    while(k < (| xs |)){
      lemma_swap_permutation(xs,ys,i,j,xs [ k ]);
      k = k + 1;
    }
  }
  
  requires (| xs |) == (| ys |);
  requires (| ys |) == (| ts |);
  requires (\forall int l;l >= 0 && l < (| xs |);counter(xs,xs [ l ]) == counter(ys,xs [ l ]));
  requires (\forall int l;l >= 0 && l < (| xs |);counter(ys,ys [ l ]) == counter(ts,ys [ l ]));
  ensures (\forall int l;l >= 0 && l < (| xs |);counter(xs,xs [ l ]) == counter(ts,xs [ l ]));
  void lemma_swap_permutation_trans(seq<int> xs,seq<int> ys,seq<int> ts){
  }
  
  requires i >= 0 && i < (| xs |);
  requires (j >= 0 && j < (| xs |));
  requires i <= j;
  requires (| xs |) == (| ys |);
  requires (| ys |) == (| ts |);
  requires (\forall int l;l >= 0 && l < (| xs |);counter(xs,xs [ l ]) == counter(ys,xs [ l ]));
  requires ts == swap(ys,i,j,0);
  ensures (\forall int l;l >= 0 && l < (| xs |);counter(xs,xs [ l ]) == counter(ts,xs [ l ]));
  ensures swap(ys,i,j,0) == ((ys [ i -> ys [ j ] ]) [ j -> ys [ i ] ]);
  ensures ((ys [ i -> ys [ j ] ]) [ j -> ys [ i ] ]) == swap(ys,i,j,0);
  void lemma_permutation_apply(seq<int> xs,seq<int> ys,seq<int> ts,int i,int j){
    lemma_swap_permutation_all(ys,ts,i,j);
    lemma_swap_permutation_trans(xs,ys,ts);
  }
  
  context_everywhere input != null;
  context_everywhere input.length == size;
  context_everywhere size > 32;
  context_everywhere (| inp_seq_cur |) == size;
  requires length == 1;
  requires (| inp_seq_all |) == length;
  requires (| inp_seq_all [ 0 ] |) == size;
  requires (\forall* int i;i >= 0 && i < size;Perm( input [ i ] , write ));
  requires (\forall int i;0 <= i && i < size;input [ i ] == inp_seq_cur [ i ]);
  requires (\forall int i;0 <= i && i < size;(inp_seq_all [ 0 ]) [ i ] == inp_seq_cur [ i ]);
  ensures (\forall* int i;i >= 0 && i < size;Perm( input [ i ] , write ));
  ensures (\forall int k;0 <= k && k < size;(inp_seq_all [ ((| inp_seq_all |) - 1) ]) [ k ] == inp_seq_cur [ k ]);
  ensures isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
  void timSort(int[] input,int size,seq<int> inp_seq_cur,seq<seq<int>> inp_seq_all,int length){
    assert inp_seq_all [ (length - 1) ] == inp_seq_cur;
    assert isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
    int RUN = 32;
    int loopCounter = 0;
    int end = 0;
    int start = 0;
    int outerLoop = 0;
    int innerLoop = 0;
    int temp = 0;
    assert RUN == 32;
    assert length > 0;
    assert (| inp_seq_cur |) == size;
    assert loopCounter >= 0;
    assert loopCounter < size + RUN;
    assert (\forall* int i;i >= 0 && i < size;Perm( input [ i ] , write ));
    assert (| inp_seq_all |) == length;
    assert (\forall int k;0 <= k && k < length;(| inp_seq_all [ k ] |) == size);
    assert (\forall int i;0 <= i && i < size;input [ i ] == inp_seq_cur [ i ]);
    assert (\forall int i;0 <= i && i < size;(inp_seq_all [ (length - 1) ]) [ i ] == inp_seq_cur [ i ]);
    assert isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
    end = 0;
    if (loopCounter + 31 < size - 1) {
      end = loopCounter + 31;
    } else {
      end = size - 1;
    }
    start = loopCounter;
    outerLoop = start + 1;
    innerLoop = 0;
    temp = 0;
    loop_invariant start >= 0;
    loop_invariant start < size;
    loop_invariant end >= 0;
    loop_invariant end < size;
    loop_invariant start <= end;
    loop_invariant outerLoop >= start + 1;
    loop_invariant outerLoop <= end + 1;
    loop_invariant (\forall* int i;i >= 0 && i < size;Perm( input [ i ] , write ));
    loop_invariant (\forall int k;0 <= k && k < length;(| inp_seq_all [ k ] |) == size);
    loop_invariant (| inp_seq_cur |) == size;
    loop_invariant (\forall int i;0 <= i && i < size;input [ i ] == inp_seq_cur [ i ]);
    loop_invariant isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
    while(outerLoop < end + 1){
      innerLoop = outerLoop;
      loop_invariant start >= 0;
      loop_invariant start < size;
      loop_invariant end >= 0;
      loop_invariant end < size;
      loop_invariant start <= end;
      loop_invariant outerLoop >= start + 1;
      loop_invariant outerLoop < end + 1;
      loop_invariant innerLoop >= start;
      loop_invariant innerLoop <= outerLoop;
      loop_invariant (\forall* int i;i >= 0 && i < size;Perm( input [ i ] , write ));
      loop_invariant (\forall int k;0 <= k && k < length;(| inp_seq_all [ k ] |) == size);
      loop_invariant (| inp_seq_cur |) == size;
      loop_invariant (\forall int i;0 <= i && i < size;input [ i ] == inp_seq_cur [ i ]);
      loop_invariant isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
      while(innerLoop > start && input [ (innerLoop - 1) ] > input [ innerLoop ]){
        lemma_permutation_apply(inp_seq_all [ 0 ],inp_seq_cur,swap(inp_seq_cur,innerLoop - 1,innerLoop,0),innerLoop - 1,innerLoop);
        temp = input [ (innerLoop - 1) ];
        input [ (innerLoop - 1) ] = input [ innerLoop ];
        inp_seq_cur = inp_seq_cur [ innerLoop - 1 -> input [ innerLoop ] ];
        input [ innerLoop ] = temp;
        inp_seq_cur = inp_seq_cur [ innerLoop -> temp ];
        innerLoop = innerLoop - 1;
      }
      outerLoop = outerLoop + 1;
    }
    inp_seq_all = inp_seq_all + seq<seq<int>>{inp_seq_cur};
    length ++;
    loopCounter = loopCounter + 32;
    loop_invariant RUN == 32;
    loop_invariant length > 0;
    loop_invariant (| inp_seq_cur |) == size;
    loop_invariant loopCounter >= 0 + 32;
    loop_invariant loopCounter < size + RUN;
    loop_invariant (\forall* int i;i >= 0 && i < size;Perm( input [ i ] , write ));
    loop_invariant (| inp_seq_all |) == length;
    loop_invariant (\forall int k;0 <= k && k < length;(| inp_seq_all [ k ] |) == size);
    loop_invariant (\forall int i;0 <= i && i < size;input [ i ] == inp_seq_cur [ i ]);
    loop_invariant (\forall int i;0 <= i && i < size;(inp_seq_all [ (length - 1) ]) [ i ] == inp_seq_cur [ i ]);
    loop_invariant isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
    while(loopCounter < size){
      end = 0;
      if (loopCounter + 31 < size - 1) {
        end = loopCounter + 31;
      } else {
        end = size - 1;
      }
      start = loopCounter;
      outerLoop = start + 1;
      innerLoop = 0;
      temp = 0;
      loop_invariant start >= 0;
      loop_invariant start < size;
      loop_invariant end >= 0;
      loop_invariant end < size;
      loop_invariant start <= end;
      loop_invariant outerLoop >= start + 1;
      loop_invariant outerLoop <= end + 1;
      loop_invariant (\forall* int i;i >= 0 && i < size;Perm( input [ i ] , write ));
      loop_invariant (\forall int k;0 <= k && k < length;(| inp_seq_all [ k ] |) == size);
      loop_invariant (| inp_seq_cur |) == size;
      loop_invariant (\forall int i;0 <= i && i < size;input [ i ] == inp_seq_cur [ i ]);
      loop_invariant isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
      while(outerLoop < end + 1){
        innerLoop = outerLoop;
        loop_invariant start >= 0;
        loop_invariant start < size;
        loop_invariant end >= 0;
        loop_invariant end < size;
        loop_invariant start <= end;
        loop_invariant outerLoop >= start + 1;
        loop_invariant outerLoop < end + 1;
        loop_invariant innerLoop >= start;
        loop_invariant innerLoop <= outerLoop;
        loop_invariant (\forall* int i;i >= 0 && i < size;Perm( input [ i ] , write ));
        loop_invariant (\forall int k;0 <= k && k < length;(| inp_seq_all [ k ] |) == size);
        loop_invariant (| inp_seq_cur |) == size;
        loop_invariant (\forall int i;0 <= i && i < size;input [ i ] == inp_seq_cur [ i ]);
        loop_invariant isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
        while(innerLoop > start && input [ (innerLoop - 1) ] > input [ innerLoop ]){
          lemma_permutation_apply(inp_seq_all [ 0 ],inp_seq_cur,swap(inp_seq_cur,innerLoop - 1,innerLoop,0),innerLoop - 1,innerLoop);
          temp = input [ (innerLoop - 1) ];
          input [ (innerLoop - 1) ] = input [ innerLoop ];
          inp_seq_cur = inp_seq_cur [ innerLoop - 1 -> input [ innerLoop ] ];
          input [ innerLoop ] = temp;
          inp_seq_cur = inp_seq_cur [ innerLoop -> temp ];
          innerLoop = innerLoop - 1;
        }
        outerLoop = outerLoop + 1;
      }
      inp_seq_all = inp_seq_all + seq<seq<int>>{inp_seq_cur};
      length ++;
      loopCounter = loopCounter + 32;
    }
    int chunk = RUN;
    int left = 0;
    int mid = 0;
    int right = 0;
    int start = 0;
    int end = 0;
    int start2 = 0;
    int index = 0;
    int temp = 0;
    assert RUN == 32;
    assert length > 0;
    assert chunk >= RUN;
    assert chunk < size + chunk;
    assert (\forall* int i;i >= 0 && i < size;Perm( input [ i ] , write ));
    assert (| inp_seq_all |) == length;
    assert (| inp_seq_cur |) == size;
    assert (\forall int k;0 <= k && k < length;(| inp_seq_all [ k ] |) == size);
    assert (\forall int i;0 <= i && i < size;input [ i ] == inp_seq_cur [ i ]);
    assert (\forall int i;0 <= i && i < size;(inp_seq_all [ (length - 1) ]) [ i ] == inp_seq_cur [ i ]);
    assert isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
    left = 0;
    loop_invariant left >= 0;
    loop_invariant left < size + 2 * chunk;
    loop_invariant length > 0;
    loop_invariant chunk < size;
    loop_invariant (\forall* int i;i >= 0 && i < size;Perm( input [ i ] , write ));
    loop_invariant (| inp_seq_all |) == length;
    loop_invariant (| inp_seq_cur |) == size;
    loop_invariant (\forall int k;0 <= k && k < length;(| inp_seq_all [ k ] |) == size);
    loop_invariant (\forall int i;0 <= i && i < size;input [ i ] == inp_seq_cur [ i ]);
    loop_invariant (\forall int i;0 <= i && i < size;(inp_seq_all [ (length - 1) ]) [ i ] == inp_seq_cur [ i ]);
    loop_invariant isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
    while(left < size){
      mid = left + chunk - 1;
      right = 0;
      if (left + 2 * chunk - 1 < size - 1) {
        right = left + 2 * chunk - 1;
      } else {
        right = size - 1;
      }
      if (mid < size - 1) {
        start = left;
        end = right;
        start2 = mid + 1;
        if (input [ mid ] <= input [ start2 ]) {
          return
          ;
        }
        assert inp_seq_all [ (length - 1) ] == inp_seq_cur;
        assert isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
        loop_invariant length > 0;
        loop_invariant (| inp_seq_all |) == length;
        loop_invariant (\forall int k;0 <= k && k < length;(| inp_seq_all [ k ] |) == size);
        loop_invariant (| inp_seq_cur |) == size;
        loop_invariant start >= 0;
        loop_invariant start < size;
        loop_invariant end >= 0;
        loop_invariant end < size;
        loop_invariant start <= end;
        loop_invariant mid + 1 >= start;
        loop_invariant mid <= end;
        loop_invariant start2 > mid;
        loop_invariant start2 <= end + 1;
        loop_invariant (\forall* int k;k >= 0 && k < size;Perm( input [ k ] , write ));
        loop_invariant (\forall int k;0 <= k && k < size;input [ k ] == inp_seq_cur [ k ]);
        loop_invariant isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
        while(start <= mid && start2 <= end){
          if (input [ start ] <= input [ start2 ]) {
            start ++;
          } else {
            index = start2;
            temp = 0;
            loop_invariant length > 0;
            loop_invariant (| inp_seq_all |) == length;
            loop_invariant (\forall int k;0 <= k && k < length;(| inp_seq_all [ k ] |) == size);
            loop_invariant (| inp_seq_cur |) == size;
            loop_invariant start >= 0;
            loop_invariant start < size;
            loop_invariant end >= 0;
            loop_invariant end < size;
            loop_invariant start <= end;
            loop_invariant mid >= start;
            loop_invariant mid <= end;
            loop_invariant start2 > mid;
            loop_invariant start2 <= end;
            loop_invariant index <= start2;
            loop_invariant index >= start;
            loop_invariant (\forall* int k;k >= 0 && k < size;Perm( input [ k ] , write ));
            loop_invariant (\forall int k;0 <= k && k < size;input [ k ] == inp_seq_cur [ k ]);
            loop_invariant isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
            while(index != start){
              lemma_permutation_apply(inp_seq_all [ 0 ],inp_seq_cur,swap(inp_seq_cur,index - 1,index,0),index - 1,index);
              temp = input [ (index - 1) ];
              input [ (index - 1) ] = input [ index ];
              inp_seq_cur = inp_seq_cur [ index - 1 -> input [ index ] ];
              input [ index ] = temp;
              inp_seq_cur = inp_seq_cur [ index -> temp ];
              index --;
            }
            start ++;
            mid ++;
            start2 ++;
          }
        }
        assert (\forall int i;0 <= i && i < size;input [ i ] == inp_seq_cur [ i ]);
      }
      inp_seq_all = inp_seq_all + seq<seq<int>>{inp_seq_cur};
      length ++;
      left = left + 2 * chunk;
    }
    chunk = 2 * chunk;
    loop_invariant RUN == 32;
    loop_invariant length > 0;
    loop_invariant chunk >= RUN * 2;
    loop_invariant chunk < size + chunk;
    loop_invariant (\forall* int i;i >= 0 && i < size;Perm( input [ i ] , write ));
    loop_invariant (| inp_seq_all |) == length;
    loop_invariant (| inp_seq_cur |) == size;
    loop_invariant (\forall int k;0 <= k && k < length;(| inp_seq_all [ k ] |) == size);
    loop_invariant (\forall int i;0 <= i && i < size;input [ i ] == inp_seq_cur [ i ]);
    loop_invariant (\forall int i;0 <= i && i < size;(inp_seq_all [ (length - 1) ]) [ i ] == inp_seq_cur [ i ]);
    loop_invariant isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
    while(chunk < size){
      left = 0;
      loop_invariant left >= 0;
      loop_invariant left < size + 2 * chunk;
      loop_invariant length > 0;
      loop_invariant chunk < size;
      loop_invariant (\forall* int i;i >= 0 && i < size;Perm( input [ i ] , write ));
      loop_invariant (| inp_seq_all |) == length;
      loop_invariant (| inp_seq_cur |) == size;
      loop_invariant (\forall int k;0 <= k && k < length;(| inp_seq_all [ k ] |) == size);
      loop_invariant (\forall int i;0 <= i && i < size;input [ i ] == inp_seq_cur [ i ]);
      loop_invariant (\forall int i;0 <= i && i < size;(inp_seq_all [ (length - 1) ]) [ i ] == inp_seq_cur [ i ]);
      loop_invariant isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
      while(left < size){
        mid = left + chunk - 1;
        right = 0;
        if (left + 2 * chunk - 1 < size - 1) {
          right = left + 2 * chunk - 1;
        } else {
          right = size - 1;
        }
        if (mid < size - 1) {
          start = left;
          end = right;
          start2 = mid + 1;
          if (input [ mid ] <= input [ start2 ]) {
            return
            ;
          }
          assert inp_seq_all [ (length - 1) ] == inp_seq_cur;
          assert isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
          loop_invariant length > 0;
          loop_invariant (| inp_seq_all |) == length;
          loop_invariant (\forall int k;0 <= k && k < length;(| inp_seq_all [ k ] |) == size);
          loop_invariant (| inp_seq_cur |) == size;
          loop_invariant start >= 0;
          loop_invariant start < size;
          loop_invariant end >= 0;
          loop_invariant end < size;
          loop_invariant start <= end;
          loop_invariant mid + 1 >= start;
          loop_invariant mid <= end;
          loop_invariant start2 > mid;
          loop_invariant start2 <= end + 1;
          loop_invariant (\forall* int k;k >= 0 && k < size;Perm( input [ k ] , write ));
          loop_invariant (\forall int k;0 <= k && k < size;input [ k ] == inp_seq_cur [ k ]);
          loop_invariant isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
          while(start <= mid && start2 <= end){
            if (input [ start ] <= input [ start2 ]) {
              start ++;
            } else {
              index = start2;
              temp = 0;
              loop_invariant length > 0;
              loop_invariant (| inp_seq_all |) == length;
              loop_invariant (\forall int k;0 <= k && k < length;(| inp_seq_all [ k ] |) == size);
              loop_invariant (| inp_seq_cur |) == size;
              loop_invariant start >= 0;
              loop_invariant start < size;
              loop_invariant end >= 0;
              loop_invariant end < size;
              loop_invariant start <= end;
              loop_invariant mid >= start;
              loop_invariant mid <= end;
              loop_invariant start2 > mid;
              loop_invariant start2 <= end;
              loop_invariant index <= start2;
              loop_invariant index >= start;
              loop_invariant (\forall* int k;k >= 0 && k < size;Perm( input [ k ] , write ));
              loop_invariant (\forall int k;0 <= k && k < size;input [ k ] == inp_seq_cur [ k ]);
              loop_invariant isApermutation(inp_seq_all [ 0 ],inp_seq_cur);
              while(index != start){
                lemma_permutation_apply(inp_seq_all [ 0 ],inp_seq_cur,swap(inp_seq_cur,index - 1,index,0),index - 1,index);
                temp = input [ (index - 1) ];
                input [ (index - 1) ] = input [ index ];
                inp_seq_cur = inp_seq_cur [ index - 1 -> input [ index ] ];
                input [ index ] = temp;
                inp_seq_cur = inp_seq_cur [ index -> temp ];
                index --;
              }
              start ++;
              mid ++;
              start2 ++;
            }
          }
          assert (\forall int i;0 <= i && i < size;input [ i ] == inp_seq_cur [ i ]);
        }
        inp_seq_all = inp_seq_all + seq<seq<int>>{inp_seq_cur};
        length ++;
        left = left + 2 * chunk;
      }
      chunk = 2 * chunk;
    }
    assert (\forall int i;0 <= i && i < size;input [ i ] == inp_seq_cur [ i ]);
  }
  
}

