// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: case opt_LoopUnrollingDiv
//:: tools silicon
//:: verdict Pass

class LoopUnrollingDiv {
  seq<int> res;
  
  context_everywhere Perm( res , write );
  requires isEmpty( res );
  ensures (\forall int j;0 <= j && j < (| res |) - 1;res [ j ] / 3 == res [ (j + 1) ]);
  void zero(){
    int i = 243;
    int oldI = i;
    int k = 0;
    assert 0 <= k;
    assert i == div(oldI,3,k);
    assert 0 <= i;
    assert i <= 243;
    assert (| res |) == k;
    assert k == 1 ==> res [ 0 ] / 3 == i;
    assert (\forall int j;0 <= j && j < (| res |);res [ j ] == div(oldI,3,j));
    assert (\forall int j;0 <= j && j < (| res |) - 1;res [ j ] / 3 == res [ (j + 1) ]);
    res = res ++ i;
    i = i / 3;
    k = k + 1;
    assert 0 <= k;
    assert i == div(oldI,3,k);
    assert 0 <= i;
    assert i <= 243;
    assert (| res |) == k;
    assert k == 1 ==> res [ 0 ] / 3 == i;
    assert (\forall int j;0 <= j && j < (| res |);res [ j ] == div(oldI,3,j));
    assert (\forall int j;0 <= j && j < (| res |) - 1;res [ j ] / 3 == res [ (j + 1) ]);
    res = res ++ i;
    i = i / 3;
    k = k + 1;
    assert 0 <= k;
    assert i == div(oldI,3,k);
    assert 0 <= i;
    assert i <= 243;
    assert (| res |) == k;
    assert k == 1 ==> res [ 0 ] / 3 == i;
    assert (\forall int j;0 <= j && j < (| res |);res [ j ] == div(oldI,3,j));
    assert (\forall int j;0 <= j && j < (| res |) - 1;res [ j ] / 3 == res [ (j + 1) ]);
    res = res ++ i;
    i = i / 3;
    k = k + 1;
    assert 0 <= k;
    assert i == div(oldI,3,k);
    assert 0 <= i;
    assert i <= 243;
    assert (| res |) == k;
    assert k == 1 ==> res [ 0 ] / 3 == i;
    assert (\forall int j;0 <= j && j < (| res |);res [ j ] == div(oldI,3,j));
    assert (\forall int j;0 <= j && j < (| res |) - 1;res [ j ] / 3 == res [ (j + 1) ]);
    res = res ++ i;
    i = i / 3;
    k = k + 1;
    loop_invariant 0 <= k;
    loop_invariant i == div(oldI,3,k);
    loop_invariant 0 <= i;
    loop_invariant i <= 243 / 81;
    loop_invariant (| res |) == k;
    loop_invariant k == 1 ==> res [ 0 ] / 3 == i;
    loop_invariant (\forall int j;0 <= j && j < (| res |);res [ j ] == div(oldI,3,j));
    loop_invariant (\forall int j;0 <= j && j < (| res |) - 1;res [ j ] / 3 == res [ (j + 1) ]);
    while(i > 1){
      res = res ++ i;
      i = i / 3;
      k = k + 1;
    }
  }
  
  requires k >= 0;
  requires y != 0;
  ensures (k == 0 ==> \result == x);
  ensures (k != 0 ==> \result == div(x,y,k - 1) / y);
  static pure int div(int x,int y,int k) = k == 0 ? x : div(x,y,k - 1) / y;
  
}

