// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: case opt_LoopUnrollingPlus
//:: tools silicon
//:: verdict Pass

class LoopUnrollingPlus {
  
  context_everywhere ar != null;
  context_everywhere N == 5;
  requires ar.length == N;
  requires (\forall* int i;0 <= i && i < N;Perm( ar [ i ] , write ));
  ensures ar.length == N;
  ensures (\forall* int i;0 <= i && i < N;Perm( ar [ i ] , write ));
  ensures (\forall int i;0 <= i && i < N;ar [ i ] == 0);
  void zero(int N,int[] ar){
    int i = 0;
    assert N == 5;
    assert 0 <= i;
    assert i <= N;
    assert (\forall* int j;0 <= j && j < N;Perm( ar [ j ] , write ));
    assert (\forall int j;0 <= j && j < i;ar [ j ] == 0);
    ar [ i ] = 0;
    i = i + 1;
    assert N == 5;
    assert 0 <= i;
    assert i <= N;
    assert (\forall* int j;0 <= j && j < N;Perm( ar [ j ] , write ));
    assert (\forall int j;0 <= j && j < i;ar [ j ] == 0);
    ar [ i ] = 0;
    i = i + 1;
    assert N == 5;
    assert 0 <= i;
    assert i <= N;
    assert (\forall* int j;0 <= j && j < N;Perm( ar [ j ] , write ));
    assert (\forall int j;0 <= j && j < i;ar [ j ] == 0);
    ar [ i ] = 0;
    i = i + 1;
    assert N == 5;
    assert 0 <= i;
    assert i <= N;
    assert (\forall* int j;0 <= j && j < N;Perm( ar [ j ] , write ));
    assert (\forall int j;0 <= j && j < i;ar [ j ] == 0);
    ar [ i ] = 0;
    i = i + 1;
    assert N == 5;
    assert 0 <= i;
    assert i <= N;
    assert (\forall* int j;0 <= j && j < N;Perm( ar [ j ] , write ));
    assert (\forall int j;0 <= j && j < i;ar [ j ] == 0);
    ar [ i ] = 0;
    i = i + 1;
    loop_invariant N == 5;
    loop_invariant 0 + 5 <= i;
    loop_invariant i <= N;
    loop_invariant (\forall* int j;0 <= j && j < N;Perm( ar [ j ] , write ));
    loop_invariant (\forall int j;0 <= j && j < i;ar [ j ] == 0);
    while(i < N){
      ar [ i ] = 0;
      i = i + 1;
    }
  }
  
}

