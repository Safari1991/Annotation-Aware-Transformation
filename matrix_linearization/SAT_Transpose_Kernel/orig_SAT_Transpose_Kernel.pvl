// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases SAT-Transpose-Kernel
//:: tools silicon
//:: verdict Pass

class SAT {
  
  gpuopt matrix_lin output C N N;
  context_everywhere N > 0;
  context_everywhere output != null;
  context_everywhere output.length == N * N;
  context_everywhere (| output_seq_pref_1 |) == N;
  context_everywhere (\forall int i;0 <= i && i < N;(| output_seq_pref_1 [ i ] |) == N);
  requires (\forall* int i;0 <= i && i < N;(\forall* int j;0 <= j && j < N;Perm( (output [ i ]) [ j ] , read )));
  requires (\forall int i;0 <= i && i < N;(\forall int j;0 <= j && j < N;(output [ i ]) [ j ] == (output_seq_pref_1 [ i ]) [ j ]));
  ensures (\forall* int i;0 <= i && i < N;(\forall* int j;0 <= j && j < N;Perm( (output [ i ]) [ j ] , read )));
  ensures (\forall int i;0 <= i && i < N;(\forall int j;0 <= j && j < N;(output [ i ]) [ j ] == (output_seq_pref_1 [ j ]) [ i ]));
  void Transpose_Kernel(int[][] output,seq<seq<int>> output_seq_pref_1,int N){
    par TransposeX(int tidX = 0 .. N)
      requires tidX >= 0 && tidX < N;
      requires (| output_seq_pref_1 |) == N;
      requires (\forall int i;i >= 0 && i < N;(| output_seq_pref_1 [ i ] |) == N);
      requires (\forall* int i;i >= 0 && i < N;Perm( (output [ tidX ]) [ i ] , read ));
      requires (\forall int i;i >= 0 && i < N;(output [ tidX ]) [ i ] == (output_seq_pref_1 [ tidX ]) [ i ]);
      ensures tidX >= 0 && tidX < N;
      ensures (| output_seq_pref_1 |) == N;
      ensures (\forall int i;i >= 0 && i < N;(| output_seq_pref_1 [ i ] |) == N);
      ensures (\forall* int i;i >= 0 && i < N;Perm( (output [ i ]) [ tidX ] , read ));
      ensures (\forall int i;i >= 0 && i < N;(output [ i ]) [ tidX ] == (output_seq_pref_1 [ tidX ]) [ i ]);
      {
        par TransposeY(int tidY = 0 .. N)
          requires tidX >= 0 && tidX < N;
          requires (tidY >= 0 && tidY < N);
          requires (| output_seq_pref_1 |) == N;
          requires (\forall int i;i >= 0 && i < N;(| output_seq_pref_1 [ i ] |) == N);
          requires Perm( (output [ tidX ]) [ tidY ] , read );
          requires (output [ tidX ]) [ tidY ] == (output_seq_pref_1 [ tidX ]) [ tidY ];
          ensures tidX >= 0 && tidX < N;
          ensures (tidY >= 0 && tidY < N);
          ensures (| output_seq_pref_1 |) == N;
          ensures (\forall int i;i >= 0 && i < N;(| output_seq_pref_1 [ i ] |) == N);
          ensures Perm( (output [ tidY ]) [ tidX ] , write );
          ensures (output [ tidY ]) [ tidX ] == (output_seq_pref_1 [ tidX ]) [ tidY ];
          {
            int temporary = (output [ tidX ]) [ tidY ];
            barrier(TransposeY) { 
              requires tidX >= 0 && tidX < N;
              requires (tidY >= 0 && tidY < N);
              requires Perm( (output [ tidX ]) [ tidY ] , read );
              ensures tidX >= 0 && tidX < N;
              ensures (tidY >= 0 && tidY < N);
              ensures Perm( (output [ tidY ]) [ tidX ] , write );
            }
            (output [ tidY ]) [ tidX ] = temporary;
          }
      }
    assert (\forall int i;0 <= i && i < N;(\forall int j;0 <= j && j < N;(output [ i ]) [ j ] == (output_seq_pref_1 [ j ]) [ i ]));
  }
  
}

