// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases opt_TransposeCopy
//:: tools silicon
//:: verdict Pass

class Ref {
  
  static pure int vct_ml_Idx(int vct_ml_X,int vct_ml_a,int vct_ml_b) = vct_ml_X * vct_ml_a + vct_ml_b;
  
  context_everywhere out != null;
  context_everywhere inp != null;
  context_everywhere M > 0;
  context_everywhere N > 0;
  context_everywhere (out.length == M * N && inp.length == N * M);
  requires (\forall* int i1;0 <= i1 && i1 < M;(\forall* int j1;0 <= j1 && j1 < N;Perm( out [ vct_ml_Idx(M,j1,i1) ] , write )));
  requires (\forall* int i1;0 <= i1 && i1 < N;(\forall* int j1;0 <= j1 && j1 < M;Perm( inp [ vct_ml_Idx(N,i1,j1) ] , 1 \ 2 )));
  ensures (\forall* int i1;0 <= i1 && i1 < M;(\forall* int j1;0 <= j1 && j1 < N;Perm( out [ vct_ml_Idx(M,j1,i1) ] , write )));
  ensures (\forall* int i1;0 <= i1 && i1 < N;(\forall* int j1;0 <= j1 && j1 < M;Perm( inp [ vct_ml_Idx(N,i1,j1) ] , 1 \ 2 )));
  ensures (\forall int i;0 <= i && i < M;(\forall int j;0 <= j && j < N;out [ vct_ml_Idx(M,j,i) ] == inp [ vct_ml_Idx(N,j,i) ]));
  ensures (\forall int i;0 <= i && i < M;(\forall int j;0 <= j && j < N;inp [ vct_ml_Idx(N,j,i) ] == \old( inp [ vct_ml_Idx(N,j,i) ] )));
  void transpose(int M,int N,int[] out,int[] inp){
    par
      (int i = 0 .. M,int j = 0 .. N)
      requires Perm( out [ vct_ml_Idx(M,j,i) ] , write );
      requires Perm( inp [ vct_ml_Idx(N,j,i) ] , 1 \ 4 );
      ensures Perm( out [ vct_ml_Idx(M,j,i) ] , write );
      ensures Perm( inp [ vct_ml_Idx(N,j,i) ] , 1 \ 4 );
      ensures out [ vct_ml_Idx(M,j,i) ] == inp [ vct_ml_Idx(N,j,i) ];
      {
        out [ vct_ml_Idx(M,j,i) ] = inp [ vct_ml_Idx(N,j,i) ];
      }
  }
  
}

